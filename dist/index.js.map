{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/** Default list of cards for creating a partial deck */\r\nconst DEFAULT_CARDS = [\"AS,2S,KS,AD,2D,KD,AC,2C,KC,AH,2H,KH\"];\r\n\r\n/** Error class indicating a missing deck parameter */\r\nclass MissingDeckError extends Error {\r\n  constructor() {\r\n    super(\"'deck' parameter is required.\");\r\n  }\r\n}\r\n\r\n/** Error class indicating a missing pile name parameter */\r\nclass MissingPileError extends Error {\r\n  constructor() {\r\n    super(\"'pileName' parameter is required.\");\r\n  }\r\n}\r\n\r\n/** \r\n * Interface representing a deck of cards from the Deck of Cards API.\r\n * Properties might vary depending on the API response.\r\n */\r\ntype Deck = {\r\n  deck_id: string;\r\n  [key: string]: any;\r\n};\r\n\r\n/**\r\n * Creates a new shuffled (optional) deck with jokers (optional) and a specified number of decks (defaults to 1).\r\n * \r\n * @param {boolean} shuffled - Whether to shuffle the deck (defaults to false).\r\n * @param {boolean} jokersEnabled - Whether to include jokers in the deck (defaults to false).\r\n * @param {number} count - The number of decks to create (defaults to 1).\r\n * @returns {Promise<object>} - A promise resolving to the deck data as a JSON object.\r\n * @throws {Error} - On network errors or unexpected API responses.\r\n */\r\nexport const createNewDeck = async (\r\n  shuffled = false,\r\n  jokersEnabled = false,\r\n  count = 1\r\n) => {\r\n  console.log(\"create new deck(s)\");\r\n  try {\r\n    const response = await fetch(\r\n      `https://www.deckofcardsapi.com/api/deck/new/${\r\n        shuffled ? \"shuffle/\" : \"\"\r\n      }?jokers_enabled=${jokersEnabled}&deck_count=${count}`\r\n    );\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a new shuffled (optional) deck with a specified list of cards.\r\n * \r\n * @param {boolean} shuffled - Whether to shuffle the deck (defaults to false).\r\n * @param {string[]} cards - A list of comma-separated card codes to include in the deck (defaults to a full deck).\r\n * @returns {Promise<object>} - A promise resolving to the deck data as a JSON object.\r\n * @throws {Error} - On network errors or unexpected API responses.\r\n */\r\nexport const createPartialDeck = async (\r\n  shuffled = false,\r\n  cards = DEFAULT_CARDS\r\n) => {\r\n  console.log(\"create partial deck\");\r\n  try {\r\n    const response = await fetch(\r\n      `https://www.deckofcardsapi.com/api/deck/new/${\r\n        shuffled ? \"shuffle/\" : \"\"\r\n      }/?cards=${cards}`\r\n    );\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a new pile named `pileName` within the provided `deck` containing the specified comma-separated list of cards.\r\n * \r\n * @param {Deck} deck - The deck object representing the deck to add the pile to.\r\n * @param {string} pileName - The name of the pile to create.\r\n * @param {string} cards - A comma-separated list of card codes to add to the pile.\r\n * @returns {Promise<object>} - A promise resolving to the pile data as a JSON object.\r\n * @throws {MissingDeckError} - If `deck` is not provided.\r\n * @throws {Error} - On network errors or unexpected API responses.\r\n */\r\nexport const createNewPile = async (\r\n  deck: Deck,\r\n  pileName: string,\r\n  cards: string\r\n) => {\r\n  console.log(\"create new pile\");\r\n  try {\r\n    const response = await fetch(\r\n      `https://www.deckofcardsapi.com/api/deck/${deck.deck_id}/pile/${pileName}/add/?cards=${cards}`\r\n    );\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch (error) {\r\n    if (!deck) throw new MissingDeckError();\r\n    if (!pileName) throw new MissingPileError();\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Lists the contents of the pile named `pileName` within the provided `deck`.\r\n * \r\n * @param {Deck} deck - The deck object representing the deck containing the pile.\r\n * @param {string} pileName - The name of the pile to list.\r\n * @returns {Promise<object>} - A promise resolving to the pile data as a JSON object.\r\n * @throws {MissingDeckError} - If `deck` is not provided.\r\n * @throws {MissingPileError} - If `pileName` is not provided.\r\n * @throws {Error} - On network errors or unexpected API responses.\r\n */\r\nexport const listPile = async (deck: Deck, pileName: string) => {\r\n  console.log(\"list pile\");\r\n  try {\r\n    const response = await fetch(\r\n      `https://www.deckofcardsapi.com/api/deck/${deck.deck_id}/pile/${pileName}/list/`\r\n    );\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch (error) {\r\n    if (!deck) throw new MissingDeckError();\r\n    if (!pileName) throw new MissingPileError();\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Draws a specified number of cards (defaults to 1) from the provided `deck`.\r\n * \r\n * @param {Deck} deck - The deck object representing the deck to draw from.\r\n * @param {number} count - The number of cards to draw (defaults to 1).\r\n * @returns {Promise<object>} - A promise resolving to the drawn cards data as a JSON object.\r\n * @throws {MissingDeckError} - If `deck` is not provided.\r\n * @throws {Error} - On network errors or unexpected API\r\n */\r\nexport const draw = async (deck: Deck, count = 1) => {\r\n  console.log(\"draw from deck\");\r\n  try {\r\n    const response = await fetch(\r\n      `https://www.deckofcardsapi.com/api/deck/${deck.deck_id}/draw/?count=${count}`\r\n    );\r\n    const data = await response.json();\r\n    console.log(data);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    if (!deck) throw new MissingDeckError();\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Draws cards from the pile named `pileName` within the provided `deck`.\r\n * \r\n * @param {Deck} deck - The deck object representing the deck containing the pile.\r\n * @param {string} pileName - The name of the pile to draw from.\r\n * @param {object | number | string} option - The draw options:\r\n *     * `count: number` (optional): Specifies the number of cards to draw.\r\n *     * `cards: string` (optional): Specifies a comma-separated list of card codes to draw.\r\n *     * `string` (defaults to \"bottom\"): Specifies a draw location like \"bottom\" or \"top\" (refer to Deck of Cards API documentation for supported locations).\r\n * @returns {Promise<object>} - A promise resolving to the drawn cards data as a JSON object.\r\n * @throws {MissingDeckError} - If `deck` is not provided.\r\n * @throws {MissingPileError} - If `pileName` is not provided.\r\n * @throws {Error} - On network errors or unexpected API responses.\r\n */\r\nexport const drawFromPile = async (\r\n  deck: Deck,\r\n  pileName: string,\r\n  option: { count: number } | { cards: string } | string = \"bottom\"\r\n) => {\r\n  console.log(\"draw from pile\");\r\n  let url = `https://www.deckofcardsapi.com/api/deck/${deck.deck_id}/pile/${pileName}/draw/`;\r\n  if (typeof option === \"string\") url += option;\r\n  else {\r\n    const [[param, value]] = Object.entries(option);\r\n    url += `?${param}=${value}`;\r\n    console.log(param, value);\r\n  }\r\n\r\n  console.log(url);\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch (error) {\r\n    if (!deck) throw new MissingDeckError();\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Returns a specified comma-separated list of cards (optional) to the provided `deck`.\r\n * \r\n * @param {Deck} deck - The deck object representing the deck to return cards to.\r\n * @param {string} cards - A comma-separated list of card codes to return (optional).\r\n * @returns {Promise<object>} - A promise resolving to the deck data as a JSON object.\r\n * @throws {MissingDeckError} - If `deck` is not provided.\r\n * @throws {Error} - On network errors or unexpected API responses.\r\n */\r\nexport const returnToDeck = async (deck: Deck, cards?: string) => {\r\n  console.log(\"return to deck\");\r\n  let url = `https://www.deckofcardsapi.com/api/deck/${deck.deck_id}/return/`;\r\n  if (cards) url += `?cards=${cards}`;\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch (error) {\r\n    if (!deck) throw new MissingDeckError();\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Returns a specified comma-separated list of cards (optional) from the pile named `pileName` within the provided `deck` to the deck.\r\n * \r\n * @param {Deck} deck - The deck object representing the deck containing the pile.\r\n * @param {string} pileName - The name of the pile to return cards from.\r\n * @param {string} cards - A comma-separated list of card codes to return (optional).\r\n * @returns {Promise<object>} - A promise resolving to the deck data as a JSON object.\r\n * @throws {MissingDeckError} - If `deck` is not provided.\r\n * @throws {MissingPileError} - If `pileName` is not provided.\r\n * @throws {Error} - On network errors or unexpected API responses.\r\n */\r\nexport const returnFromPile = async (\r\n  deck: Deck,\r\n  pileName: string,\r\n  cards?: string\r\n) => {\r\n  console.log(\"return from pile\");\r\n\r\n  let url = `https://www.deckofcardsapi.com/api/deck/${deck.deck_id}/pile/${pileName}/return/`;\r\n  if (cards) url += `?cards=${cards}`;\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch (error) {\r\n    if (!deck) throw new MissingDeckError();\r\n    if (!pileName) throw new MissingPileError();\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Shuffles the provided `deck`. Optionally shuffles only remaining cards (refer to Deck of Cards API documentation).\r\n * \r\n * @param {Deck} deck - The deck object representing the deck to shuffle.\r\n * @param {boolean} remaining - Whether to shuffle only remaining cards (defaults to false).\r\n * @returns {Promise<object>} - A promise resolving to the deck data as a JSON object.\r\n * @throws {MissingDeckError} - If `deck` is not provided.\r\n * @throws {Error} - On network errors or unexpected API responses.\r\n */\r\nexport const shuffleDeck = async (deck: Deck, remaining = false) => {\r\n  console.log(\"shuffle deck\");\r\n  try {\r\n    const response = await fetch(\r\n      `https://www.deckofcardsapi.com/api/deck/${deck.deck_id}/shuffle/?remaining=${remaining}`\r\n    );\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch (error) {\r\n    if (!deck) throw new MissingDeckError();\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Shuffles the pile named `pileName` within the provided `deck`.\r\n * \r\n * @param {Deck} deck - The deck object representing the deck containing the pile.\r\n * @param {string} pileName - The name of the pile to shuffle.\r\n * @returns {Promise<object>} - A promise resolving to the pile data as a JSON object.\r\n * @throws {MissingDeckError} - If `deck` is not provided.\r\n * @throws {MissingPileError} - If `pileName` is not provided.\r\n * @throws {Error} - On network errors or unexpected API responses.\r\n */\r\nexport const shufflePile = async (deck: Deck, pileName: string) => {\r\n  console.log(\"shuffle pile\");\r\n  try {\r\n    const response = await fetch(\r\n      `https://www.deckofcardsapi.com/api/deck/${deck.deck_id}/pile/${pileName}/shuffle/`\r\n    );\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch (error) {\r\n    if (!deck) throw new MissingDeckError();\r\n    if (!pileName) throw new MissingPileError();\r\n    console.error(error);\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
